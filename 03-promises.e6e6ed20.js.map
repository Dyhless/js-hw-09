{"mappings":"qhBACA,IAAAA,EAAAC,EAAA,SAGsB,MAAhBC,EAAOC,SAASC,cAAc,SAkCX,SAAhBC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAES,MAA9BC,EAAgBC,KAAKC,SAAW,GAGQC,YAAnC,KAELH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA5C4BL,EAApCa,iBAAiB,UAGU,SAAVC,GAEYA,EAA1BC,iBAGuB,MAAvBC,EAAQC,OAAOhB,SAASC,cAAc,uBAAuBgB,OAC7DC,EAAOF,OAAOhB,SAASC,cAAc,sBAAsBgB,OAC3DE,EAASH,OAAOhB,SAASC,cAAc,wBAAwBgB,OAGjClB,EAA/BqB,QAGuB,IAAvB,IAAIC,EAAI,EAAGA,EAAIF,EAAQE,GAAK,EAAG,CAIlCnB,EAHiBmB,EAAI,EACAN,EAAQM,EAAIH,GAG9BI,MAAK,EAACnB,SAAEA,EAAQC,MAAEA,MACjBmB,EAAA1B,GAAS2B,OAAOC,QAAQ,aAAWtB,iBAAaC,MAAa,IAE9DsB,OAAM,EAACvB,SAAEA,EAAQC,MAAEA,MAClBmB,EAAA1B,GAAS2B,OAAOG,QAAQ,aAAWxB,iBAAaC,MAAa,G","sources":["src/js/03-promises.js"],"sourcesContent":["// Импорт библиотеки Notiflix\nimport Notiflix from 'notiflix';\n\n// Получение ссылки на форму\nconst form = document.querySelector('.form');\n\n// Назначение обработчика события отправки формы\nform.addEventListener('submit', handleSubmit);\n\n// Callback-функция для обработки отправки формы\nfunction handleSubmit(event) {\n  // Предотвращение обновления страницы\n  event.preventDefault();\n\n  // Получение значений из полей формы\n  const delay = Number(document.querySelector('input[name=\"delay\"]').value);\n  const step = Number(document.querySelector('input[name=\"step\"]').value);\n  const amount = Number(document.querySelector('input[name=\"amount\"]').value);\n\n  // Сброс значений полей формы после отправки\n  form.reset();\n\n  // Создание промисов и их обработка\n  for (let i = 0; i < amount; i += 1) {\n    const position = i + 1;\n    const currentDelay = delay + i * step;\n\n    createPromise(position, currentDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Promise ${position} выполнен за ${delay}мс`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Promise ${position} отклонен за ${delay}мс`);\n      });\n  }\n}\n\n// Функция для создания промиса\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    // Определение, успешно ли выполнится промис\n    const shouldResolve = Math.random() > 0.3;\n\n    // Установка таймера для имитации асинхронной операции\n    setTimeout(() => {\n      // Решение или отклонение промиса в зависимости от условия\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","delay1","Number","value","step","amount","reset","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.e6e6ed20.js.map"}
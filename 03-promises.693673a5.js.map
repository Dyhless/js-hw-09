{"mappings":"iiBACA,IAAAA,EAAAC,EAAA,SAGMC,EAAOC,SAASC,cAAc,SAkCX,SAAhBC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAES,IAA9BC,EAAgBC,KAAKC,SAAW,GAGQC,YAAnC,WAELH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IA5CkCL,EAApCa,iBAAiB,UAGU,SAAVC,GAEYA,EAA1BC,iBAGuB,IAAvBC,EAAQC,OAAOhB,SAASC,cAAc,uBAAuBgB,OAC7DC,EAAOF,OAAOhB,SAASC,cAAc,sBAAsBgB,OAC3DE,EAASH,OAAOhB,SAASC,cAAc,wBAAwBgB,OAGjClB,EAA/BqB,QAGuB,IAAvB,IAAIC,EAAI,EAAGA,EAAIF,EAAQE,GAAK,EAAG,CAIlCnB,EAHiBmB,EAAI,EACAN,EAAQM,EAAIH,GAG9BI,MAAK,SAAAC,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MACjBoB,EAAA3B,GAAS4B,OAAOC,QAAQ,aAAuCC,OAAxBxB,EAAS,iBAA+BwB,OAANvB,EAAM,M,IAEhFwB,OAAM,SAAAL,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MAClBoB,EAAA3B,GAAS4B,OAAOI,QAAQ,aAAuCF,OAAxBxB,EAAS,iBAA+BwB,OAANvB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["// Импорт библиотеки Notiflix\nimport Notiflix from 'notiflix';\n\n// Получение ссылки на форму\nconst form = document.querySelector('.form');\n\n// Назначение обработчика события отправки формы\nform.addEventListener('submit', handleSubmit);\n\n// Callback-функция для обработки отправки формы\nfunction handleSubmit(event) {\n  // Предотвращение обновления страницы\n  event.preventDefault();\n\n  // Получение значений из полей формы\n  const delay = Number(document.querySelector('input[name=\"delay\"]').value);\n  const step = Number(document.querySelector('input[name=\"step\"]').value);\n  const amount = Number(document.querySelector('input[name=\"amount\"]').value);\n\n  // Сброс значений полей формы после отправки\n  form.reset();\n\n  // Создание промисов и их обработка\n  for (let i = 0; i < amount; i += 1) {\n    const position = i + 1;\n    const currentDelay = delay + i * step;\n\n    createPromise(position, currentDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Promise ${position} выполнен за ${delay}мс`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Promise ${position} отклонен за ${delay}мс`);\n      });\n  }\n}\n\n// Функция для создания промиса\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    // Определение, успешно ли выполнится промис\n    const shouldResolve = Math.random() > 0.3;\n\n    // Установка таймера для имитации асинхронной операции\n    setTimeout(() => {\n      // Решение или отклонение промиса в зависимости от условия\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","delay1","Number","value","step","amount","reset","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.693673a5.js.map"}